// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WordCount.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ArticleContext))]
    [Migration("20211201100149_NewModels")]
    partial class NewModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WordCount.Data.Models.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalWords")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublisherName");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("WordCount.Data.Models.JsonSchemaModel", b =>
                {
                    b.Property<string>("SchemaName")
                        .HasColumnType("text");

                    b.Property<string>("JsonString")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("SchemaName");

                    b.ToTable("JsonSchema");
                });

            modelBuilder.Entity("WordCount.Data.Models.Publisher", b =>
                {
                    b.Property<string>("PublisherName")
                        .HasColumnType("text");

                    b.HasKey("PublisherName");

                    b.HasIndex("PublisherName")
                        .IsUnique();

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("WordCount.Data.Models.Word", b =>
                {
                    b.Property<string>("Literal")
                        .HasColumnType("text");

                    b.HasKey("Literal");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("WordCount.Data.Models.WordOccurrence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("WordLiteral")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("WordLiteral");

                    b.ToTable("WordOccurrence");
                });

            modelBuilder.Entity("WordCount.Data.Models.WordRatio", b =>
                {
                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalWords")
                        .HasColumnType("integer");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToView("WordRatio");
                });

            modelBuilder.Entity("WordCount.Data.Models.Article", b =>
                {
                    b.HasOne("WordCount.Data.Models.Publisher", "Publisher")
                        .WithMany("Articles")
                        .HasForeignKey("PublisherName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("WordCount.Data.Models.WordOccurrence", b =>
                {
                    b.HasOne("WordCount.Data.Models.Article", "Article")
                        .WithMany("WordOccurrences")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordCount.Data.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordLiteral");

                    b.Navigation("Article");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("WordCount.Data.Models.Article", b =>
                {
                    b.Navigation("WordOccurrences");
                });

            modelBuilder.Entity("WordCount.Data.Models.Publisher", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
